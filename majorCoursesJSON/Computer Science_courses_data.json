[
    {
        "course_tag": "CS",
        "course_number": "1100",
        "course_name": "Computer Science and Its Applications",
        "credit_hours": "4",
        "prerequisites": "",
        "corequisites": [
            "CS 1101"
        ],
        "attributes": [
            "NUpath Analyzing/Using Data"
        ],
        "description": "Introduces students to the field of computer science and the patterns of thinking that enable them to become intelligent users of software tools in a problem-solving setting. Examines several important software applications so that students may develop the skills necessary to use computers effectively in their own disciplines."
    },
    {
        "course_tag": "CS",
        "course_number": "1101",
        "course_name": "Lab for CS 1100",
        "credit_hours": "1",
        "prerequisites": "",
        "corequisites": [
            "CS 1100"
        ],
        "attributes": [],
        "description": "Accompanies CS 1100. Involves experiments and problem solving across multiple disciplines using computer science techniques and tools."
    },
    {
        "course_tag": "CS",
        "course_number": "1200",
        "course_name": "First Year Seminar",
        "credit_hours": "1",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [],
        "description": "Seeks to support students in their transition to Northeastern and in their holistic development as they become responsible members of the college and university communities. Incorporates large group discussion, small group activities, and self-reflection in order to facilitate connections with faculty, staff, and peers; promote utilization of appropriate campus resources; and assist with academic and personal goal setting."
    },
    {
        "course_tag": "CS",
        "course_number": "1210",
        "course_name": "Professional Development for Khoury Co-op",
        "credit_hours": "1",
        "prerequisites": "CS 2510 with a minimum grade of D-  or  DS 2500 with a minimum grade of D-",
        "corequisites": [],
        "attributes": [],
        "description": "Continues the preparation of students for careers in the computing and information fields by discussing co-op and co-op processes. Offers students an opportunity to prepare a professional resumé; practice proper interviewing techniques; explore current job opportunities; learn how to engage in the job and referral process; and to understand co-op policies, procedures, and expectations. Discusses professional behavior and ethical issues in the workplace."
    },
    {
        "course_tag": "CS",
        "course_number": "1800",
        "course_name": "Discrete Structures",
        "credit_hours": "4",
        "prerequisites": "",
        "corequisites": [
            "CS 1802"
        ],
        "attributes": [
            "NUpath Formal/Quant Reasoning"
        ],
        "description": "Introduces the mathematical structures and methods that form the foundation of computer science. Studies structures such as sets, tuples, sequences, lists, trees, and graphs. Discusses functions, relations, ordering, and equivalence relations. Examines inductive and recursive definitions of structures and functions. Discusses principles of proof such as truth tables, inductive proof, and basic logic. Also covers the counting techniques and arguments needed to estimate the size of sets, the growth of functions, and the space-time complexity of algorithms."
    },
    {
        "course_tag": "CS",
        "course_number": "1802",
        "course_name": "Seminar for CS 1800",
        "credit_hours": "1",
        "prerequisites": "",
        "corequisites": [
            "CS 1800"
        ],
        "attributes": [],
        "description": "Accompanies CS 1800. Illustrates topics from the lecture course through discussions, quizzes, and homework assignments."
    },
    {
        "course_tag": "CS",
        "course_number": "1990",
        "course_name": "Elective",
        "credit_hours": "1-4",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [],
        "description": "Offers elective credit for courses taken at other academic institutions. May be repeated without limit."
    },
    {
        "course_tag": "CS",
        "course_number": "2500",
        "course_name": "Fundamentals of Computer Science 1",
        "credit_hours": "4",
        "prerequisites": "",
        "corequisites": [
            "CS 2501"
        ],
        "attributes": [
            "NUpath Formal/Quant Reasoning",
            "NUpath Natural/Designed World"
        ],
        "description": "Introduces the fundamental ideas of computing and the principles of programming. Discusses a systematic approach to word problems, including analytic reading, synthesis, goal setting, planning, plan execution, and testing. Presents several models of computing, starting from nothing more than expression evaluation in the spirit of high school algebra. No prior programming experience is assumed; therefore, suitable for freshman students, majors and nonmajors alike who wish to explore the intellectual ideas in the discipline."
    },
    {
        "course_tag": "CS",
        "course_number": "2501",
        "course_name": "Lab for CS 2500",
        "credit_hours": "1",
        "prerequisites": "",
        "corequisites": [
            "CS 2500"
        ],
        "attributes": [],
        "description": "Accompanies CS 2500. Covers topics from the course through various experiments."
    },
    {
        "course_tag": "CS",
        "course_number": "2510",
        "course_name": "Fundamentals of Computer Science 2",
        "credit_hours": "4",
        "prerequisites": "CS 2500 with a minimum grade of D-",
        "corequisites": [
            "CS 2511"
        ],
        "attributes": [
            "NUpath Analyzing/Using Data",
            "NUpath Natural/Designed World"
        ],
        "description": "Continues CS 2500. Examines object-oriented programming and associated algorithms using more complex data structures as the focus. Discusses nested structures and nonlinear structures including hash tables, trees, and graphs. Emphasizes abstraction, encapsulation, inheritance, polymorphism, recursion, and object-oriented design patterns. Applies these ideas to sample applications that illustrate the breadth of computer science."
    },
    {
        "course_tag": "CS",
        "course_number": "2511",
        "course_name": "Lab for CS 2510",
        "credit_hours": "1",
        "prerequisites": "",
        "corequisites": [
            "CS 2510"
        ],
        "attributes": [],
        "description": "Accompanies CS 2510. Covers topics from the course through various experiments."
    },
    {
        "course_tag": "CS",
        "course_number": "2800",
        "course_name": "Logic and Computation",
        "credit_hours": "4",
        "prerequisites": "(CS 1800 with a minimum grade of D-  or  MATH 1365 with a minimum grade of D-  or  MATH 2310 with a minimum grade of D- );  CS 2500 with a minimum grade of D-",
        "corequisites": [],
        "attributes": [],
        "description": "Introduces formal logic and its connections to computer and information science. Offers an opportunity to learn to translate statements about the behavior of computer programs into logical claims and to gain the ability to prove such assertions both by hand and using automated tools. Considers approaches to proving termination, correctness, and safety for programs. Discusses notations used in logic, propositional and first order logic, logical inference, mathematical induction, and structural induction. Introduces the use of logic for modeling the range of artifacts and phenomena that arise in computer and information science."
    },
    {
        "course_tag": "CS",
        "course_number": "2810",
        "course_name": "Mathematics of Data Models",
        "credit_hours": "4",
        "prerequisites": "CS 1800 with a minimum grade of D- ;  CS 2500 with a minimum grade of D-",
        "corequisites": [],
        "attributes": [
            "NUpath Analyzing/Using Data",
            "NUpath Formal/Quant Reasoning"
        ],
        "description": "Studies the methods and ideas in linear algebra, multivariable calculus, and statistics that are most relevant for the practicing computer scientist doing machine learning, modeling, or hypothesis testing with data. Covers least squares regression, finding eigenvalues to predict a linear system’s behavior, performing gradient descent to fit a model to data, and performing t-tests and chi-square tests to determine whether differences between populations are significant. Includes applications to popular machine-learning methods, including Bayesian models and neural networks."
    },
    {
        "course_tag": "CS",
        "course_number": "2963",
        "course_name": "Topics",
        "credit_hours": "1,2",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [],
        "description": "Offers undergraduate students an opportunity to learn about timely issues, develop new skills, or explore areas of broad interest in an immersive, short-course format. Content and instructors vary by offering."
    },
    {
        "course_tag": "CS",
        "course_number": "2990",
        "course_name": "Elective",
        "credit_hours": "1-4",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [],
        "description": "Offers elective credit for courses taken at other academic institutions. May be repeated without limit."
    },
    {
        "course_tag": "CS",
        "course_number": "2991",
        "course_name": "Research in Computer Science",
        "credit_hours": "1-4",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [],
        "description": "Offers an opportunity to conduct introductory-level research or creative endeavors under faculty supervision."
    },
    {
        "course_tag": "CS",
        "course_number": "2992",
        "course_name": "Research",
        "credit_hours": "0",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [],
        "description": "Offers an opportunity to document student contributions to research projects or creative endeavors."
    },
    {
        "course_tag": "CS",
        "course_number": "3000",
        "course_name": "Algorithms and Data",
        "credit_hours": "4",
        "prerequisites": "((CS 2510 with a minimum grade of D-  or  DS 2500 with a minimum grade of D- );  CS 1800 with a minimum grade of D- ) or  EECE 2160 with a minimum grade of D-",
        "corequisites": [
            "CS 3001"
        ],
        "attributes": [
            "NUpath Formal/Quant Reasoning"
        ],
        "description": "Introduces the basic principles and techniques for the design, analysis, and implementation of efficient algorithms and data representations. Discusses asymptotic analysis and formal methods for establishing the correctness of algorithms. Considers divide-and-conquer algorithms, graph traversal algorithms, and optimization techniques. Introduces information theory and covers the fundamental structures for representing data. Examines flat and hierarchical representations, dynamic data representations, and data compression. Concludes with a discussion of the relationship of the topics in this course to complexity theory and the notion of the hardness of problems."
    },
    {
        "course_tag": "CS",
        "course_number": "3001",
        "course_name": "Recitation for CS 3000",
        "credit_hours": "0",
        "prerequisites": "",
        "corequisites": [
            "CS 3000"
        ],
        "attributes": [],
        "description": "Accompanies CS 3000. Provides students with additional opportunities to ask questions and engage with course material."
    },
    {
        "course_tag": "CS",
        "course_number": "3200",
        "course_name": "Database Design",
        "credit_hours": "4",
        "prerequisites": "CS 2500 with a minimum grade of D-  or  DS 2000 with a minimum grade of D-  or  CS 1500 with a minimum grade of D-  or  EECE 2560 with a minimum grade of D-",
        "corequisites": [],
        "attributes": [
            "NUpath Analyzing/Using Data"
        ],
        "description": "Studies the design of a database for use in a relational database management system. The entity-relationship model and normalization are used in problems. Relational algebra and then the SQL (structured query language) are presented. Advanced topics include triggers, stored procedures, indexing, elementary query optimization, and fundamentals of concurrency and recovery. Students implement a database schema and short application programs on one or more commercial relational database management systems."
    },
    {
        "course_tag": "CS",
        "course_number": "3500",
        "course_name": "Object-Oriented Design",
        "credit_hours": "4",
        "prerequisites": "CS 2510 with a minimum grade of D-  or  CS 1500 with a minimum grade of D-  or  EECE 2560 with a minimum grade of D-",
        "corequisites": [
            "CS 3501"
        ],
        "attributes": [
            "NUpath Analyzing/Using Data",
            "NUpath Natural/Designed World"
        ],
        "description": "Presents a comparative approach to object-oriented programming and design. Discusses the concepts of object, class, meta-class, message, method, inheritance, and genericity. Reviews forms of polymorphism in object-oriented languages. Contrasts the use of inheritance and composition as dual techniques for software reuse: forwarding vs. delegation and subclassing vs. subtyping. Fosters a deeper understanding of the principles of object-oriented programming and design including software components, object-oriented design patterns, and the use of graphical design notations such as UML (unified modeling language). Basic concepts in object-oriented design are illustrated with case studies in application frameworks and by writing programs in one or more object-oriented languages."
    },
    {
        "course_tag": "CS",
        "course_number": "3501",
        "course_name": "Lab for CS 3500",
        "credit_hours": "1",
        "prerequisites": "",
        "corequisites": [
            "CS 3500"
        ],
        "attributes": [],
        "description": "Accompanies CS 3500. Covers topics from the course and provides students with additional opportunities to engage with course material."
    },
    {
        "course_tag": "CS",
        "course_number": "3520",
        "course_name": "Programming in C++",
        "credit_hours": "4",
        "prerequisites": "CS 1500 with a minimum grade of D-  or  CS 2510 with a minimum grade of D-  or  DS 2500 with a minimum grade of D-",
        "corequisites": [],
        "attributes": [],
        "description": "Examines how to program in C++ in a robust and safe manner. Reviews basics, including scoping, typing, and primitive data structures. Discusses data types (primitive, array, structure, class, string); addressing/parameter mechanisms (value, pointer, reference); stacks; queues; linked lists; binary trees; hash tables; and the design of classes and class inheritance, emphasizing single inheritance. Considers the instantiation of objects, the trade-offs of stack vs. heap allocation, and the design of constructors and destructors. Emphasizes the need for a strategy for dynamic memory management. Addresses function and operator overloading; templates, the Standard Template Library (STL), and the STL components (containers, generic algorithms, iterators, adaptors, allocators, function objects); streams; exception handling; and system calls for processes and threads."
    },
    {
        "course_tag": "CS",
        "course_number": "3540",
        "course_name": "Game Programming",
        "credit_hours": "4",
        "prerequisites": "CS 2510 with a minimum grade of D-",
        "corequisites": [],
        "attributes": [],
        "description": "Introduces the different subsystems used to create a 3D game, including rendering, animation, collision, physics, audio, trigger systems, game logic, behavior trees, and simple artificial intelligence. Offers students an opportunity to learn the inner workings of game engines and how to use multiple libraries such as physics and graphics libraries to develop a game. Discusses graphics pipeline, scene graph, level design, behavior scripting, object-oriented game design, world editors, and game scripting languages."
    },
    {
        "course_tag": "CS",
        "course_number": "3650",
        "course_name": "Computer Systems",
        "credit_hours": "4",
        "prerequisites": "CS 2510 with a minimum grade of D-  or  CS 1500 with a minimum grade of D-  or  EECE 2560 with a minimum grade of D-",
        "corequisites": [],
        "attributes": [],
        "description": "Introduces the basic design of computing systems, computer operating systems, and assembly language using a RISC architecture. Describes caches and virtual memory. Covers the interface between assembly language and high-level languages, including call frames and pointers. Covers the use of system calls and systems programming to show the interaction with the operating system. Covers the basic structures of an operating system, including application interfaces, processes, threads, synchronization, interprocess communication, deadlock, memory management, file systems, and input/output control."
    },
    {
        "course_tag": "CS",
        "course_number": "3700",
        "course_name": "Networks and Distributed Systems",
        "credit_hours": "4",
        "prerequisites": "CS 2510 with a minimum grade of D-",
        "corequisites": [],
        "attributes": [],
        "description": "Introduces the fundamentals of computer networks, including network architectures, network topologies, network protocols, layering concepts (for example, ISO/OSI, TCP/IP reference models), communication paradigms (point-to-point vs. multicast/broadcast, connectionless vs. connection oriented), and networking APIs (sockets). Also covers the construction of distributed programs, with an emphasis on high-level protocols and distributed state sharing. Topics include design patterns, transactions, performance trade-offs, security implications, and reliability. Uses examples from real networks (TCP/IP, Ethernet, 802.11) and distributed systems (Web, BitTorrent, DNS) to reinforce concepts."
    },
    {
        "course_tag": "CS",
        "course_number": "3800",
        "course_name": "Theory of Computation",
        "credit_hours": "4",
        "prerequisites": "CS 1500 with a minimum grade of D-  or  CS 2510 with a minimum grade of D-  or  EECE 2160 with a minimum grade of D-  or  EECE 2162 with a minimum grade of D-  or  EECE 2164 with a minimum grade of D-",
        "corequisites": [],
        "attributes": [],
        "description": "Introduces the theory behind computers and computing aimed at answering the question, “What are the capabilities and limitations of computers?” Covers automata theory, computability, and complexity. The automata theory portion includes finite automata, regular expressions, nondeterminism, nonregular languages, context-free languages, pushdown automata, and noncontext-free languages. The computability portion includes Turing machines, the Church-Turing thesis, decidable languages, and the Halting theorem. The complexity portion includes big-O and small-o notation, the classes P and NP, the P vs. NP question, and NP-completeness."
    },
    {
        "course_tag": "CS",
        "course_number": "3950",
        "course_name": "Introduction to Computer Science Research",
        "credit_hours": "2",
        "prerequisites": "CS 2500 with a minimum grade of D-",
        "corequisites": [],
        "attributes": [],
        "description": "Introduces students to research in the fields of computer science, information science, data science, and cybersecurity. Explores how the scientific method is applied to these fields and covers the breadth of subareas of specialty that exist. Offers students an opportunity to practice how to locate and read scientific literature in different subareas. Also offers students an overview of graduate education in these fields."
    },
    {
        "course_tag": "CS",
        "course_number": "3990",
        "course_name": "Elective",
        "credit_hours": "1-4",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [],
        "description": "Offers elective credit for courses taken at other academic institutions. May be repeated without limit."
    },
    {
        "course_tag": "CS",
        "course_number": "4050",
        "course_name": "Values and Sociotechnical Algorithmic Systems",
        "credit_hours": "4",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [],
        "description": "Examines the societal impact of artificial intelligence technologies and prominent strategies for aligning these impacts with social and ethical values. Offers multidisciplinary readings to provide conceptual lenses for understanding these technologies in their contexts of use."
    },
    {
        "course_tag": "CS",
        "course_number": "4097",
        "course_name": "Mixed Reality",
        "credit_hours": "4",
        "prerequisites": "CS 3540 with a minimum grade of D-",
        "corequisites": [],
        "attributes": [],
        "description": "Seeks to provide a strong foundation in the fundamentals of virtual and augmented reality, broadly defined as mixed reality (XR). These technologies have recently witnessed a resurgence of interest. Offers students an opportunity to obtain hands-on experience developing XR applications by diving into this burgeoning area of research and practice in computer science. Synthesizes theoretical and practice knowledge from various disciplines, including computer graphics, 3D interfaces, human-computer interaction, tracking systems, and perceptual psychology."
    },
    {
        "course_tag": "CS",
        "course_number": "4100",
        "course_name": "Artificial Intelligence",
        "credit_hours": "4",
        "prerequisites": "CS 3500 with a minimum grade of D-  or  DS 3500 with a minimum grade of D-",
        "corequisites": [],
        "attributes": [
            "NUpath Capstone Experience",
            "NUpath Writing Intensive"
        ],
        "description": "Introduces the fundamental problems, theories, and algorithms of the artificial intelligence field. Includes heuristic search; knowledge representation using predicate calculus; automated deduction and its applications; planning; and machine learning. Additional topics include game playing; uncertain reasoning and expert systems; natural language processing; logic for common-sense reasoning; ontologies; and multiagent systems."
    },
    {
        "course_tag": "CS",
        "course_number": "4120",
        "course_name": "Natural Language Processing",
        "credit_hours": "4",
        "prerequisites": "CS 3500 with a minimum grade of D-  or  DS 3500 with a minimum grade of D-",
        "corequisites": [],
        "attributes": [],
        "description": "Introduces the computational modeling of human language; the ongoing effort to create computer programs that can communicate with people in natural language; and current applications of the natural language field, such as automated document classification, intelligent query processing, and information extraction. Topics include computational models of grammar and automatic parsing, statistical language models and the analysis of large text corpora, natural language semantics and programs that understand language, models of discourse structure, and language use by intelligent agents. Course work includes formal and mathematical analysis of language models and implementation of working programs that analyze and interpret natural language text. Knowledge of statistics is helpful."
    },
    {
        "course_tag": "CS",
        "course_number": "4150",
        "course_name": "Game Artificial Intelligence",
        "credit_hours": "4",
        "prerequisites": "CS 3500 with a minimum grade of D- ;  CS 3520 with a minimum grade of D-",
        "corequisites": [],
        "attributes": [
            "NUpath Capstone Experience",
            "NUpath Writing Intensive"
        ],
        "description": "Offers an overview of classical and modern approaches to artificial intelligence in digital games. Focuses on the creation of believable agents and environments with the goal of providing a fun and engaging experience to a player. Covers player modeling, procedural content generation, behavior trees, interactive narrative, decision-making systems, cognitive modeling, and path planning. Explores different approaches for behavior generation, including learning and rule-based systems. Requires students to complete several individual assignments in these areas to apply the concepts covered in class. Students choose a group final project to explore one aspect of artificial intelligence for games in further depth. Offers students an opportunity to learn team management and communication. Students who do not meet course prerequisites may seek permission of instructor."
    },
    {
        "course_tag": "CS",
        "course_number": "4180",
        "course_name": "Reinforcement Learning",
        "credit_hours": "4",
        "prerequisites": "CS 3000 with a minimum grade of D- ;  (ECON 2350 with a minimum grade of D-  or  ENVR 2500 with a minimum grade of D-  or  MATH 3081 with a minimum grade of D-  or  PSYC 2320 with a minimum grade of D-  or  CS 2810 with a minimum grade of D- );  (MATH 2331 with a minimum grade of D-  or  CS 2810 with a minimum grade of D- )",
        "corequisites": [],
        "attributes": [],
        "description": "Introduces reinforcement learning and the Markov decision process (MDP) framework. Covers methods for planning and learning in MDPs such as dynamic programming, model-based methods, and model-free methods. Examines commonly used representations including deep-learning representations. Students are expected to have a working knowledge of probability, to complete programming assignments, and to complete a course project that applies some form of reinforcement learning to a problem of interest."
    },
    {
        "course_tag": "CS",
        "course_number": "4200",
        "course_name": "Database Internals",
        "credit_hours": "4",
        "prerequisites": "CS 3000 with a minimum grade of D- ;  CS 3650 with a minimum grade of D-",
        "corequisites": [],
        "attributes": [],
        "description": "Explores the internal workings of database management systems. Explains how database systems store data on disks. Studies how to improve query efficiency using index techniques such as B+-tree, hash indices, and multidimensional indices. Describes how queries are executed internally and how database systems perform query optimizations. Introduces concurrency control schemes implemented by locking, such as hierarchical locking and key range locking. Describes lock table structure. Discusses how database systems can perform logging and recovery to avoid loss of data in case of system crashes."
    },
    {
        "course_tag": "CS",
        "course_number": "4300",
        "course_name": "Computer Graphics",
        "credit_hours": "4",
        "prerequisites": "(CS 1500 with a minimum grade of D-  or  CS 2510 with a minimum grade of D-  or  CS 3500 with a minimum grade of D-  or  EECE 2560 with a minimum grade of D- );  (MATH 1260 with a minimum grade of D-  or  MATH 2331 with a minimum grade of D-  or  MATH 2341 with a minimum grade of D-  or  CS 2810 with a minimum grade of D- )",
        "corequisites": [],
        "attributes": [
            "NUpath Capstone Experience",
            "NUpath Writing Intensive"
        ],
        "description": "Charts a path through every major aspect of computer graphics with varying degrees of emphasis. Discusses hardware issues: size and speed; lines, polygons, and regions; modeling, or objects and their relations; viewing, or what can be seen (visibility and perspective); rendering, or how it looks (properties of surfaces, light, and color); transformations, or moving, placing, distorting, and animating and interaction, or drawing, selecting, and transforming."
    },
    {
        "course_tag": "CS",
        "course_number": "4360",
        "course_name": "Non-Interactive Computer Graphics",
        "credit_hours": "4",
        "prerequisites": "(CS 2810 with a minimum grade of D-  or  MATH 2331 with a minimum grade of D- );  CS 3500 with a minimum grade of D-",
        "corequisites": [],
        "attributes": [],
        "description": "Introduces computer graphics algorithms and concepts primarily focusing on offline rendering techniques. Consists of a lecture component and in-class laboratory to study common image synthesis algorithms and techniques to generate images used in games and 3D animated movies. Culminates with a final project in which students complete in groups or individually a renderer for generating high quality images. Students with an interest in a career as a graphics, rendering, or high performance computer engineer may consider taking this course."
    },
    {
        "course_tag": "CS",
        "course_number": "4400",
        "course_name": "Programming Languages",
        "credit_hours": "4",
        "prerequisites": "CS 3500 with a minimum grade of D- ;  (CS 3000 with a minimum grade of D-  or  CS 4800 with a minimum grade of D- )",
        "corequisites": [],
        "attributes": [],
        "description": "Introduces a systematic approach to understanding the behavior of programming languages. Covers interpreters; static and dynamic scope; environments; binding and assignment; functions and recursion; parameter-passing and method dispatch; objects, classes, inheritance, and polymorphism; type rules and type checking; and concurrency."
    },
    {
        "course_tag": "CS",
        "course_number": "4410",
        "course_name": "Compilers",
        "credit_hours": "4",
        "prerequisites": "CS 4400 with a minimum grade of D-  or  CS 5400 with a minimum grade of C-  or  CS 7400 with a minimum grade of C-",
        "corequisites": [],
        "attributes": [
            "NUpath Capstone Experience",
            "NUpath Writing Intensive"
        ],
        "description": "Studies the construction of compilers and integrates material from earlier courses on programming languages, automata theory, computer architecture, and software design. Examines syntax trees; static semantics; type checking; typical machine architectures and their software structures; code generation; lexical analysis; and parsing techniques. Uses a hands-on approach with a substantial term project."
    },
    {
        "course_tag": "CS",
        "course_number": "4500",
        "course_name": "Software Development",
        "credit_hours": "4",
        "prerequisites": "CS 3500 with a minimum grade of D- ;  (ENGW 1111 with a minimum grade of C  or  ENGW 1102 with a minimum grade of C )",
        "corequisites": [],
        "attributes": [
            "NUpath Writing Intensive"
        ],
        "description": "Considers software development as a systematic process involving specification, design, documentation, implementation, testing, and maintenance. Examines software process models; methods for software specification; modularity, abstraction, and software reuse; and issues of software quality. Students, possibly working in groups, design, document, implement, test, and modify software projects."
    },
    {
        "course_tag": "CS",
        "course_number": "4520",
        "course_name": "Mobile Application Development",
        "credit_hours": "4",
        "prerequisites": "CS 3500 with a minimum grade of D-",
        "corequisites": [],
        "attributes": [],
        "description": "Focuses on mobile application development on a mobile phone or related platform. Discusses memory management; user interface building, including both MVC principles and specific tools; touch events; data handling, including core data, SQL, XML, and JSON; network techniques and URL loading; and, finally, specifics such as GPS and motion sensing that may be dependent on the particular mobile platform. Students are expected to work on a project that produces a professional-quality mobile application. The instructor chooses a modern mobile platform to be used in the course."
    },
    {
        "course_tag": "CS",
        "course_number": "4530",
        "course_name": "Fundamentals of Software Engineering",
        "credit_hours": "4",
        "prerequisites": "CS 3500 with a minimum grade of D-",
        "corequisites": [],
        "attributes": [
            "NUpath Writing Intensive"
        ],
        "description": "Covers the fundamentals of software engineering, including software development life cycle models (e.g., waterfall, spiral,agile); requirements analysis; user-centered design; software design principles and patterns; testing (functional testing, structural testing, testing strategies); code refactoring and debugging; software architecture and design; and integration and deployment. Includes a course project in which some of the software engineering methods (from requirements analysis to testing) are applied in a team-based setting."
    },
    {
        "course_tag": "CS",
        "course_number": "4550",
        "course_name": "Web Development",
        "credit_hours": "4",
        "prerequisites": "CS 3500 with a minimum grade of D-  or  DS 3500 with a minimum grade of D-",
        "corequisites": [],
        "attributes": [
            "NUpath Capstone Experience",
            "NUpath Writing Intensive"
        ],
        "description": "Discusses Web development for sites that are dynamic, data driven, and interactive. Focuses on the software development issues of integrating multiple languages, assorted data technologies, and Web interaction. Considers ASP.NET, C#, HTTP, HTML, CSS, XML, XSLT, JavaScript, AJAX, RSS/Atom, SQL, and Web services. Requires each student to deploy individually designed Web experiments that illustrate the Web technologies and at least one major integrative Web site project. Students may work as a team with the permission of the instructor. Each student or team must also create extensive documentation of their goals, plans, design decisions, accomplishments, and user guidelines. All source files must be open and be automatically served by a sources server."
    },
    {
        "course_tag": "CS",
        "course_number": "4610",
        "course_name": "Robotic Science and Systems",
        "credit_hours": "4",
        "prerequisites": "CS 3500 with a minimum grade of D-",
        "corequisites": [],
        "attributes": [],
        "description": "Introduces autonomous mobile robots, with a focus on algorithms and software development, including closed-loop control, robot software architecture, wheeled locomotion and navigation, tactile and basic visual sensing, obstacle detection and avoidance, and grasping and manipulation of objects. Offers students an opportunity to progressively construct mobile robots from a predesigned electromechanical kit. The robots are controlled wirelessly by software of the students’ own design, built within a provided robotics software framework. The course culminates in a grand challenge competition using all features of the robots."
    },
    {
        "course_tag": "CS",
        "course_number": "4700",
        "course_name": "Network Fundamentals",
        "credit_hours": "4",
        "prerequisites": "CS 3650 with a minimum grade of D-  or  CS 5600 with a minimum grade of D-  or  CS 5600 with a minimum grade of C-  (Graduate)",
        "corequisites": [],
        "attributes": [],
        "description": "Introduces the fundamental concepts of network protocols and network architectures. Presents the different harmonizing functions needed for the communication and effective operation of computer networks. Provides in-depth coverage of data link control, medium access control, routing, end-to-end transport protocols, congestion and flow control, multicasting, naming, auto configuration, quality of service, and network management. Studies the abstract mechanisms and algorithms as implemented in real-world Internet protocols. Also covers the most common application protocols (e-mail, Web, and ftp)."
    },
    {
        "course_tag": "CS",
        "course_number": "4710",
        "course_name": "Mobile and Wireless Systems",
        "credit_hours": "4",
        "prerequisites": "CS 3700 with a minimum grade of D-  or  CS 4730 with a minimum grade of D-",
        "corequisites": [],
        "attributes": [],
        "description": "Covers both theoretical foundations of wireless/mobile networking and practical aspects of wireless/mobile systems, including current standards, mobile development platforms, and emerging technologies. Incorporates a strong practical component; requires students to work in teams on several practical assignments (e.g., based on Wi-Fi sensing, mobile applications, Internet-of-Things devices, and software-defined radio applications) and a final project. The final project integrates knowledge about several wireless communication technologies and mechanisms."
    },
    {
        "course_tag": "CS",
        "course_number": "4730",
        "course_name": "Distributed Systems",
        "credit_hours": "4",
        "prerequisites": "CS 3650 with a minimum grade of D-",
        "corequisites": [],
        "attributes": [],
        "description": "Introduces distributed systems, covering fundamental concepts and showing how they are applied to build reliable distributed services. Examines several existing distributed applications, such as file systems, databases, lock services, digital currencies, smart contracts, and machine learning, and how these applications must coordinate to function and overcome failures, network partitions, or compromised parties. Distributed systems, such as databases, cloud services, and blockchains, are omnipresent in the services and applications that serve society on a daily basis."
    },
    {
        "course_tag": "CS",
        "course_number": "4805",
        "course_name": "Fundamentals of Complexity Theory",
        "credit_hours": "4",
        "prerequisites": "CS 3800 with a minimum grade of D-",
        "corequisites": [],
        "attributes": [],
        "description": "Reviews basic material such as automata, Turing machines, (un)decidability, time complexity, P vs. NP, and NP-completeness. Studies core topics in computational complexity, including time and space complexity, polynomial hierarchy, circuit complexity, probabilistic computation, interactive proofs, and hardness of approximation. Optional topics may include Gödel's incompleteness theorem, Kolgomorov complexity, cryptography, quantum computing, communication complexity, lower bounds, or pseudorandomness."
    },
    {
        "course_tag": "CS",
        "course_number": "4810",
        "course_name": "Advanced Algorithms",
        "credit_hours": "4",
        "prerequisites": "CS 3000 with a minimum grade of D-",
        "corequisites": [],
        "attributes": [],
        "description": "Builds on CS 3000. Presents an advanced study of computer algorithms. Covers basic algorithmic paradigms (e.g., greedy, divide-and-conquer, and dynamic programming); graph algorithms; optimization; computational Intractability (e.g., NP-completeness, PSPACE-completeness); randomized algorithms; and approximation algorithms."
    },
    {
        "course_tag": "CS",
        "course_number": "4820",
        "course_name": "Computer-Aided Reasoning",
        "credit_hours": "4",
        "prerequisites": "CS 2800 with a minimum grade of D- ;  CS 3000 with a minimum grade of D-",
        "corequisites": [],
        "attributes": [
            "NUpath Capstone Experience"
        ],
        "description": "Covers fundamental concepts, techniques, and algorithms in computer-aided reasoning, including propositional logic, variants of the DPLL algorithm for satisfiability checking, first-order logic, unification, tableaux, resolution, Horn clauses, congruence closure, rewriting, Knuth-Bendix completion, decision procedures, Satisfiability Modulo Theories, recursion, induction, termination, Presburger arithmetic, quantifier elimination, and interactive theorem proving. Offers students an opportunity to develop and implement a reasoning engine in a sequence of projects over the course of the semester. Also covers how to formalize and reason about computational systems using a modern interactive theorem prover."
    },
    {
        "course_tag": "CS",
        "course_number": "4830",
        "course_name": "System Specification, Verification, and Synthesis",
        "credit_hours": "4",
        "prerequisites": "CS 3000 with a minimum grade of D-",
        "corequisites": [],
        "attributes": [],
        "description": "Covers the fundamental topics in formal modeling and specification (transition systems, temporal logic, regular and omega-regular languages, safety and liveness properties, etc.); computer-aided verification (state-space exploration, model checking, bounded-model checking, binary-decision diagrams, symbolic model checking, etc.); compositionality and assume-guarantee reasoning; contracts; and component-based design. Also covers fundamental topics in computer-aided synthesis of correct-by-construction systems, starting from high-level formal specifications or from example scenarios. Designing large and complex systems (digital circuits, embedded control systems such as automated vehicles, computerized healthcare devices such as pacemakers, cyber-physical systems such as automated intersections, etc.) and their software cannot be done by hand. Instead, designers use computer-aided techniques that allow them to build system models and verify correctness of the design before the real system is actually built."
    },
    {
        "course_tag": "CS",
        "course_number": "4850",
        "course_name": "Building Game Engines",
        "credit_hours": "4",
        "prerequisites": "CS 3520 with a minimum grade of D- ;  CS 3540 with a minimum grade of D-",
        "corequisites": [],
        "attributes": [],
        "description": "Discusses the components of game engines and strategies for their software implementation. Includes graphics management algorithms (animation, scene graph, level of detail); basic artificial intelligence algorithms (search, decision making, sensing); and related algorithmic issues (networking, threading, input processing). Explores the use of data-driven software design. Offers students an opportunity to use a rendering engine and to build and integrate several software components to create a complete game engine. Requires students to work on several individual assignments to apply the algorithms and then develop a project in a team. Offers students an opportunity to learn team/project management; work division; team communication; and the software development cycle of implementation, testing, critique, and further iteration. Students who do not meet course prerequisites may seek permission of instructor."
    },
    {
        "course_tag": "CS",
        "course_number": "4950",
        "course_name": "Computer Science Research Seminar",
        "credit_hours": "1",
        "prerequisites": "CS 3950 with a minimum grade of D-",
        "corequisites": [],
        "attributes": [],
        "description": "Offers students an in-depth look at research in a particular subarea of computer science, information science, data science, or cybersecurity. The particular subarea varies from semester to semester. Exposes students to current research topics, often via guest faculty members. Offers students an opportunity to practice reading and discussing scientific literature, presenting scientific work, and distilling the key ideas and contributions of papers through required weekly paper summaries."
    },
    {
        "course_tag": "CS",
        "course_number": "4955",
        "course_name": "Computer Science Teaching Seminar",
        "credit_hours": "1",
        "prerequisites": "CS 2500 with a minimum grade of D-",
        "corequisites": [],
        "attributes": [],
        "description": "Introduces techniques and frameworks to prepare undergraduate students to become more effective teaching assistants in the field of computer science. Students analyze and reflect on literature, case studies, and real examples of teaching computer science. Offers students an opportunity to participate within in-class activities to learn presentation skills, to practice speaking to different audience sizes, and to learn how to work with different types of audiences. Culminates with a final capstone project in which students prepare and present a lecture on a topic in computer science. Successful students are prepared for careers in teaching, presenting technical content when pursuing graduate studies, and for presenting technical information in industry."
    },
    {
        "course_tag": "CS",
        "course_number": "4970",
        "course_name": "Junior/Senior Honors Project 1",
        "credit_hours": "4",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [],
        "description": "Focuses on in-depth project in which a student conducts research or produces a product related to the student’s major field. Combined with Junior/Senior Project 2 or college-defined equivalent for 8 credit honors in the discipline project."
    },
    {
        "course_tag": "CS",
        "course_number": "4971",
        "course_name": "Junior/Senior Honors Project 2",
        "credit_hours": "4",
        "prerequisites": "CS 4970 with a minimum grade of D-",
        "corequisites": [],
        "attributes": [],
        "description": "Focuses on second semester of in-depth project in which a student conducts research or produces a product related to the student’s major field."
    },
    {
        "course_tag": "CS",
        "course_number": "4973",
        "course_name": "Topics in Computer Science",
        "credit_hours": "4",
        "prerequisites": "CS 3000 with a minimum grade of D- ;  (CS 3500 with a minimum grade of D-  or  DS 3500 with a minimum grade of D- )",
        "corequisites": [],
        "attributes": [],
        "description": "Offers a lecture course in computer science on a topic not regularly taught in a formal course. Topics may vary from offering to offering. May be repeated up to three times."
    },
    {
        "course_tag": "CS",
        "course_number": "4990",
        "course_name": "Elective",
        "credit_hours": "1-4",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [],
        "description": "Offers elective credit for courses taken at other academic institutions. May be repeated without limit."
    },
    {
        "course_tag": "CS",
        "course_number": "4991",
        "course_name": "Research",
        "credit_hours": "4,8",
        "prerequisites": "CS 3500 with a minimum grade of D- ;  CS 3800 with a minimum grade of D-",
        "corequisites": [],
        "attributes": [
            "NUpath Capstone Experience",
            "NUpath Integration Experience",
            "NUpath Writing Intensive"
        ],
        "description": "Offers an opportunity to conduct research under faculty supervision. May be repeated up to three times."
    },
    {
        "course_tag": "CS",
        "course_number": "4992",
        "course_name": "Directed Study",
        "credit_hours": "1-6",
        "prerequisites": "CS 3500 with a minimum grade of D- ;  CS 3800 with a minimum grade of D-",
        "corequisites": [],
        "attributes": [],
        "description": "Focuses on student examining standard computer science material in fresh ways or new computer science material that is not covered in formal courses. May be repeated up to three times."
    },
    {
        "course_tag": "CS",
        "course_number": "4993",
        "course_name": "Independent Study",
        "credit_hours": "1-6",
        "prerequisites": "CS 3500 with a minimum grade of D- ;  CS 3800 with a minimum grade of D-",
        "corequisites": [],
        "attributes": [],
        "description": "Offers independent work under the direction of members of the department on a chosen topic. Course content depends on instructor. May be repeated up to three times."
    },
    {
        "course_tag": "CS",
        "course_number": "4998",
        "course_name": "Research",
        "credit_hours": "0",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [],
        "description": "Offers an opportunity to document student contributions to research projects or creative endeavors."
    },
    {
        "course_tag": "CS",
        "course_number": "5001",
        "course_name": "Intensive Foundations of Computer Science",
        "credit_hours": "4",
        "prerequisites": "",
        "corequisites": [
            "CS 5003"
        ],
        "attributes": [],
        "description": "Introduces systematic problem solving through programming. Offers students an opportunity to learn how to analyze a problem, how to divide and organize the problem into appropriate components, how to describe the problem in a computer language, how to analyze and understand the behavior of their programs, and how to test that their programs are working correctly. Additionally, introduces a method of program design called object-oriented programming and various ways to organize data, including a discussion of their advantages and disadvantages. To practice the course concepts, students undertake assignments ranging from small, highly specified programming tasks to larger open-ended problems where students design and code their own solutions."
    },
    {
        "course_tag": "CS",
        "course_number": "5002",
        "course_name": "Discrete Structures",
        "credit_hours": "4",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [],
        "description": "Introduces the mathematical structures and methods that form the foundation of computer science. Studies structures such as sets, tuples, sequences, lists, trees, and graphs. Discusses functions, relations, ordering, and equivalence relations. Examines inductive and recursive definitions of structures and functions. Covers principles of proof such as truth tables, inductive proof, and basic logic and the counting techniques and arguments needed to estimate the size of sets, the growth of functions, and the space-time complexity of algorithms. Also, discusses data structures such as arrays, stacks, queues, lists, and the algorithms that manipulate them."
    },
    {
        "course_tag": "CS",
        "course_number": "5003",
        "course_name": "Recitation for CS 5001",
        "credit_hours": "0",
        "prerequisites": "",
        "corequisites": [
            "CS 5001"
        ],
        "attributes": [],
        "description": "Provides a small-group discussion format to cover material in CS 5001. Coreq CS 5001.."
    },
    {
        "course_tag": "CS",
        "course_number": "5004",
        "course_name": "Object-Oriented Design",
        "credit_hours": "4",
        "prerequisites": "(CS 5001 with a minimum grade of C-  or  CS 5001 with a minimum grade of C- );  (CS 5002 with a minimum grade of C-  or  CS 5002 with a minimum grade of C- )",
        "corequisites": [
            "CS 5005"
        ],
        "attributes": [],
        "description": "Presents a comparative approach to object-oriented programming and design. Discusses the concepts of object, class, metaclass, message, method, inheritance, and genericity. Reviews forms of polymorphism in object-oriented languages. Contrasts the use of inheritance and composition as dual techniques for software reuse—forwarding vs. delegation and subclassing vs. subtyping. Offers students an opportunity to obtain a deeper understanding of the principles of object-oriented programming and design, including software components, object-oriented design patterns, and the use of graphical design notations such as UML (unified modeling language). Illustrates basic concepts in object-oriented design with case studies in application frameworks and by writing programs in Java."
    },
    {
        "course_tag": "CS",
        "course_number": "5005",
        "course_name": "Recitation for CS 5004",
        "credit_hours": "0",
        "prerequisites": "",
        "corequisites": [
            "CS 5004"
        ],
        "attributes": [],
        "description": "Provides small-group discussion format to cover material in CS 5004."
    },
    {
        "course_tag": "CS",
        "course_number": "5006",
        "course_name": "Algorithms",
        "credit_hours": "2",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [],
        "description": "Introduces the basic principles and techniques for the design and implementation of efficient algorithms and data representations. Considers divide-and-conquer algorithms, graph traversal algorithms, linear programming, and optimization techniques. Covers the fundamental structures for representing data, such as hash tables, trees, and graphs."
    },
    {
        "course_tag": "CS",
        "course_number": "5007",
        "course_name": "Computer Systems",
        "credit_hours": "2",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [],
        "description": "Introduces the basic design of computing systems, computer operating systems, and assembly language using a RISC architecture. Describes caches and virtual memory. Covers the interface between assembly language and high-level languages, including call frames and pointers; the use of system calls and systems programming to show the interaction with the operating system; and the basic structures of an operating system, including application interfaces, processes, threads, synchronization, interprocess communication, deadlock, memory management, file systems, and input/output control."
    },
    {
        "course_tag": "CS",
        "course_number": "5008",
        "course_name": "Data Structures, Algorithms, and Their Applications within Computer Systems",
        "credit_hours": "4",
        "prerequisites": "(CS 5001 with a minimum grade of C-  or  CS 5001 with a minimum grade of C- );  (CS 5002 with a minimum grade of C-  or  CS 5002 with a minimum grade of C- )",
        "corequisites": [
            "CS 5009"
        ],
        "attributes": [],
        "description": "Presents an integrated approach to the study of data structures, algorithms, and their application within systems topics. Introduces a variety of fundamental algorithmic techniques (divide-and-conquer, dynamic programming, graph algorithms) and systems topics (models of computation, computer architecture, compilation, system software, networking). Demonstrates the integration of topics through programming assignments in the C language that implement fundamental data structures (lists, queues, trees, maps, graphs) and algorithms as they are applied in computer systems. Additional breadth topics include programming applications that expose students to primitives of different subsystems using threads and sockets."
    },
    {
        "course_tag": "CS",
        "course_number": "5009",
        "course_name": "Recitation for CS 5008",
        "credit_hours": "0",
        "prerequisites": "",
        "corequisites": [
            "CS 5008"
        ],
        "attributes": [],
        "description": "Provides small-group active learning format to augment material in CS 5008."
    },
    {
        "course_tag": "CS",
        "course_number": "5010",
        "course_name": "Programming Design Paradigm",
        "credit_hours": "4",
        "prerequisites": "",
        "corequisites": [
            "CS 5011"
        ],
        "attributes": [],
        "description": "Introduces modern program design paradigms. Starts with functional program design, introducing the notion of a design recipe. The latter consists of two parts: a task organization (ranging from the description of data to the creation of a test suite) and a data-oriented approach to the organization of programs (ranging from atomic data to self-referential data definitions and functions as data). The course then progresses to object-oriented design, explaining how it generalizes and contrasts with functional design. In addition to studying program design, students also have an opportunity to practice pair-programming and public code review techniques, as found in industry today."
    },
    {
        "course_tag": "CS",
        "course_number": "5011",
        "course_name": "Recitation for CS 5010",
        "credit_hours": "0",
        "prerequisites": "",
        "corequisites": [
            "CS 5010"
        ],
        "attributes": [],
        "description": "Provides small-group discussion format to cover material in CS 5010."
    },
    {
        "course_tag": "CS",
        "course_number": "5081",
        "course_name": "Accessibility and Inclusiveness in Human-Computer Interaction",
        "credit_hours": "2",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [],
        "description": "Covers the fundamentals of user experience. Emphasizes how to integrate accessibility and usability to enhance the user experience in everyday products and services for everyone, including seniors and people with disabilities."
    },
    {
        "course_tag": "CS",
        "course_number": "5097",
        "course_name": "Mixed Reality",
        "credit_hours": "4",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [],
        "description": "Seeks to provide a strong foundation in the fundamentals of virtual and augmented reality, broadly defined as mixed reality (XR), and hands-on experience developing XR applications. Offers students an opportunity to dive into this burgeoning area of research and practice in computer science. Given the complex nature of XR environments, this course synthesizes theoretical and practice knowledge from various disciplines, including computer graphics, 3D interfaces, human-computer interaction, tracking systems, and perceptual psychology (to name a few). XR technologies have recently witnessed a resurgence of interest."
    },
    {
        "course_tag": "CS",
        "course_number": "5100",
        "course_name": "Foundations of Artificial Intelligence",
        "credit_hours": "4",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [
            "NUpath Capstone Experience",
            "NUpath Writing Intensive"
        ],
        "description": "Introduces the fundamental problems, theories, and algorithms of the artificial intelligence field. Topics include heuristic search and game trees, knowledge representation using predicate calculus, automated deduction and its applications, problem solving and planning, and introduction to machine learning. Required course work includes the creation of working programs that solve problems, reason logically, and/or improve their own performance using techniques presented in the course. Requires experience in Java programming."
    },
    {
        "course_tag": "CS",
        "course_number": "5150",
        "course_name": "Game Artificial Intelligence",
        "credit_hours": "4",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [
            "NUpath Capstone Experience",
            "NUpath Writing Intensive"
        ],
        "description": "Offers an overview of classical and modern approaches to artificial intelligence in digital games. Focuses on the creation of believable agents and environments with the goal of providing a fun and engaging experience to a player. Covers player modeling, procedural content generation, behavior trees, interactive narrative, decision-making systems, cognitive modeling, and path planning. Explores different approaches for behavior generation, including learning and rule-based systems. Requires students to complete several individual assignments in these areas to apply the concepts covered in class. Students choose a group final project, which requires a report, to explore one aspect of artificial intelligence for games in further depth. Offers students an opportunity to learn team management and communication. Requires knowledge of algorithms and experience with object-oriented design or functional programming."
    },
    {
        "course_tag": "CS",
        "course_number": "5170",
        "course_name": "Artificial Intelligence for Human-Computer Interaction",
        "credit_hours": "4",
        "prerequisites": "CS 5100 with a minimum grade of C- ;  CS 5800 with a minimum grade of C- ;  CS 6140 with a minimum grade of C-",
        "corequisites": [],
        "attributes": [],
        "description": "Offers an overview of the wide range of AI techniques that exploit knowledge of the domain and humans to facilitate interaction between humans and systems, mediate human-human interaction, leverage humans to improve system performance, and promote beneficial outcomes at the social and individual level. Topics can include AI/human computation, plan and activity recognition, smart sensing/homes, active learning, preference elicitation, intelligent/adaptive user interfaces, and mixed human-agent simulations. Studies how to design and develop intelligent interaction technologies while also critically assessing their social and ethical impact."
    },
    {
        "course_tag": "CS",
        "course_number": "5180",
        "course_name": "Reinforcement Learning and Sequential Decision Making",
        "credit_hours": "4",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [],
        "description": "Introduces reinforcement learning and the underlying computational frameworks and the Markov decision process framework. Covers a variety of reinforcement learning algorithms, including model-based, model-free, value function, policy gradient, actor-critic, and Monte Carlo methods. Examines commonly used representations including deep learning representations and approaches to partially observable problems. Students are expected to have a working knowledge of probability and linear algebra, to complete programming assignments, and to complete a course project that applies some form of reinforcement learning to a problem of interest."
    },
    {
        "course_tag": "CS",
        "course_number": "5200",
        "course_name": "Database Management Systems",
        "credit_hours": "4",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [
            "NUpath Analyzing/Using Data"
        ],
        "description": "Introduces relational database management systems as a class of software systems. Prepares students to be sophisticated users of database management systems. Covers design theory, query language, and performance/tuning issues. Topics include relational algebra, SQL, stored procedures, user-defined functions, cursors, embedded SQL programs, client-server interfaces, entity-relationship diagrams, normalization, B-trees, concurrency, transactions, database security, constraints, object-relational DBMSs, and specialized engines such as spatial, text, XML conversion, and time series. Includes exercises using a commercial relational or object-relational database management system."
    },
    {
        "course_tag": "CS",
        "course_number": "5310",
        "course_name": "Computer Graphics",
        "credit_hours": "4",
        "prerequisites": "MATH 2331 with a minimum grade of D-  or  graduate program admission",
        "corequisites": [],
        "attributes": [
            "NUpath Capstone Experience",
            "NUpath Writing Intensive"
        ],
        "description": "Introduces the fundamentals of two-dimensional and three-dimensional computer graphics, with an emphasis on approaches for obtaining realistic images. Covers two-dimensional algorithms for drawing lines and curves, anti-aliasing, filling, and clipping. Studies rendering of three-dimensional scenes composed of spheres, polygons, quadric surfaces, and bi-cubic surfaces using ray-tracing and radiosity. Includes techniques for adding texture to surfaces using texture and bump maps, noise, and turbulence. Requires knowledge of linear algebra."
    },
    {
        "course_tag": "CS",
        "course_number": "5330",
        "course_name": "Pattern Recognition and Computer Vision",
        "credit_hours": "4",
        "prerequisites": "MATH 2331 with a minimum grade of D-  or  graduate program admission",
        "corequisites": [],
        "attributes": [],
        "description": "Introduces fundamental techniques for low-level and high-level computer vision. Examines image formation, early processing, boundary detection, image segmentation, texture analysis, shape from shading, photometric stereo, motion analysis via optic flow, object modeling, shape description, and object recognition (classification). Discusses models of human vision (gestalt effects, texture perception, subjective contours, visual illusions, apparent motion, mental rotations, and cyclopean vision). Requires knowledge of linear algebra."
    },
    {
        "course_tag": "CS",
        "course_number": "5335",
        "course_name": "Robotic Science and Systems",
        "credit_hours": "4",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [],
        "description": "Introduces autonomous mobile robots with a focus on algorithms and software development, including closed-loop control, robot software architecture, wheeled locomotion and navigation, tactile and basic visual sensing, obstacle detection and avoidance, and grasping and manipulation of objects. Offers students an opportunity to progressively construct mobile robots from a predesigned electromechanical kit. The robots are controlled wirelessly by software of the students’ own design, built within a provided robotics software framework. Culminates in a project that connects the algorithms and hardware developed in the course with a selected topic in the current robotics research literature."
    },
    {
        "course_tag": "CS",
        "course_number": "5340",
        "course_name": "Computer/Human Interaction",
        "credit_hours": "4",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [],
        "description": "Covers the principles of human-computer interaction and the design and evaluation of user interfaces. Topics include an overview of human information processing subsystems (perception, memory, attention, and problem solving); how the properties of these systems affect the design of user interfaces; the principles, guidelines, and specification languages for designing good user interfaces, with emphasis on tool kits and libraries of standard graphical user interface objects; and a variety of interface evaluation methodologies that can be used to measure the usability of software. Other topics may include World Wide Web design principles and tools, computer-supported cooperative work, multimodal and “next generation” interfaces, speech and natural language interfaces, and virtual reality interfaces. Course work includes both the creation and implementation of original user interface designs, and the evaluation of user interfaces created by others. Requires knowledge of C programming language/UNIX."
    },
    {
        "course_tag": "CS",
        "course_number": "5350",
        "course_name": "Applied Geometric Representation and Computation",
        "credit_hours": "4",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [],
        "description": "Surveys practical techniques for representing geometric objects in two and three dimensions, for computing their motions and interactions, and for human interfaces to manipulate them. These techniques are useful not only in graphics but also in robotics, computer vision, game design, geographic information systems, computer-aided design and manufacturing, spatial reasoning and planning, physical simulation, biomechanics, and the implementation of many types of human-computer interface. Requires undergraduate background in algorithms."
    },
    {
        "course_tag": "CS",
        "course_number": "5360",
        "course_name": "Noninteractive Computer Graphics",
        "credit_hours": "4",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [],
        "description": "Introduces computer graphics algorithms and concepts. Focuses on offline rendering techniques. Consists of a lecture component and in-class laboratory offering instruction about common image synthesis algorithms and techniques to generate images used in games and 3D-animated movies. Culminates in a final individual or group project to complete a renderer for generating high-quality images. This course is appropriate for students interested in a career as a graphics, rendering, or high-performance computer engineer."
    },
    {
        "course_tag": "CS",
        "course_number": "5400",
        "course_name": "Principles of Programming Language",
        "credit_hours": "4",
        "prerequisites": "CS 5010 with a minimum grade of D-  or  CS 5004 with a minimum grade of B-  or  CS 5010 with a minimum grade of C-  (Graduate)",
        "corequisites": [],
        "attributes": [],
        "description": "Studies the basic components of programming languages, specification of syntax and semantics, and description and implementation of programming language features. Discusses examples from a variety of languages."
    },
    {
        "course_tag": "CS",
        "course_number": "5500",
        "course_name": "Foundations of Software Engineering",
        "credit_hours": "4",
        "prerequisites": "CS 5010 with a minimum grade of D  or  CS 5004 with a minimum grade of C  or  CS 5010 with a minimum grade of C",
        "corequisites": [],
        "attributes": [
            "NUpath Writing Intensive"
        ],
        "description": "Covers the foundations of software engineering, including software development life cycle models (e.g., waterfall, spiral, agile); requirements analysis; user-centered design; software design principles and patterns; testing (functional testing, structural testing, testing strategies); code refactoring and debugging; software architecture and design; and integration and deployment. Includes a course project where some of the software engineering methods (from requirements analysis to testing) are applied in a team-based setting. Requires admission to MS program or completion of all transition courses."
    },
    {
        "course_tag": "CS",
        "course_number": "5520",
        "course_name": "Mobile Application Development",
        "credit_hours": "4",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [],
        "description": "Focuses on mobile application development on a mobile phone or related platform. Discusses memory management; user interface building, including both MVC principles and specific tools; touch events; data handling, including core data, SQL, XML, and JSON; network techniques and URL loading; and, finally, specifics such as GPS and motion sensing that may be dependent on the particular mobile platform. Students are expected to work on a project that produces a professional-quality mobile application and to demonstrate the application that they have developed. The instructor chooses a modern mobile platform to be used in the course."
    },
    {
        "course_tag": "CS",
        "course_number": "5600",
        "course_name": "Computer Systems",
        "credit_hours": "4",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [],
        "description": "Studies the structure, components, design, implementation, and internal operation of computer systems, focusing mainly on the operating system level. Reviews computer hardware and architecture including the arithmetic and logic unit, and the control unit. Covers current operating system components and construction techniques including the memory and memory controller, I/O device management, device drivers, memory management, file system structures, and the user interface. Introduces distributed operating systems. Discusses issues arising from concurrency and distribution, such as scheduling of concurrent processes, interprocess communication and synchronization, resource sharing and allocation, and deadlock management and resolution. Includes examples from real operating systems. Exposes students to the system concepts through programming exercises. Requires admission to MS program or completion of all transition courses."
    },
    {
        "course_tag": "CS",
        "course_number": "5610",
        "course_name": "Web Development",
        "credit_hours": "4",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [
            "NUpath Capstone Experience",
            "NUpath Writing Intensive"
        ],
        "description": "Discusses Web development for sites that are dynamic, data driven, and interactive. Focuses on the software development issues of integrating multiple languages, assorted data technologies, and Web interaction. Considers ASP.NET, C#, HTTP, HTML, CSS, XML, XSLT, JavaScript, AJAX, RSS/Atom, SQL, and Web services. Each student must deploy individually designed Web experiments that illustrate the Web technologies and at least one major integrative Web site project. Students may work in teams with the permission of the instructor. Each student or team must also create extensive documentation of their goals, plans, design decisions, accomplishments, and user guidelines. All source files must be open and be automatically served by a sources server."
    },
    {
        "course_tag": "CS",
        "course_number": "5700",
        "course_name": "Fundamentals of Computer Networking",
        "credit_hours": "4",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [],
        "description": "Studies network protocols, focusing on modeling and analysis, and architectures. Introduces modeling concepts, emphasizing queuing theory, including Little’s theorem, M/M/1, M/M/m, M/D/1, and M/G/1 queuing systems. Discusses performance evaluation of computer networks including performance metrics, evaluation tools and methodology, simulation techniques, and limitations. Presents the different harmonizing functions needed for communication and efficient operation of computer networks and discusses examples of Ethernet, FDDI, and wireless networks. Covers link layer protocols including HDLC, PPP, and SLIP; packet framing; spanning tree and learning bridges, error detection techniques, and automatic repeat request algorithms; sliding window and reliable/ordered services; and queuing disciplines including FQ and WFQ. Introduces flow control schemes, such as window flow control and leaky bucket rate control schemes, and discusses congestion control and fairness. Requires knowledge of probability theory."
    },
    {
        "course_tag": "CS",
        "course_number": "5800",
        "course_name": "Algorithms",
        "credit_hours": "4",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [
            "NUpath Formal/Quant Reasoning"
        ],
        "description": "Presents the mathematical techniques used for the design and analysis of computer algorithms. Focuses on algorithmic design paradigms and techniques for analyzing the correctness, time, and space complexity of algorithms. Topics may include asymptotic notation, recurrences, loop invariants, Hoare triples, sorting and searching, advanced data structures, lower bounds, hashing, greedy algorithms, dynamic programming, graph algorithms, and NP-completeness."
    },
    {
        "course_tag": "CS",
        "course_number": "5850",
        "course_name": "Building Game Engines",
        "credit_hours": "4",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [],
        "description": "Discusses the components of game engines and strategies for their software implementation. Includes graphics management algorithms (animation, scene graph, level of detail); basic artificial intelligence algorithms (search, decision making, sensing); and related algorithmic issues (networking, threading, input processing). Explores the use of data-driven software design. Offers students an opportunity to use a rendering engine and to build and integrate several software components to create a complete game engine. Requires students to work on individual assignments and then develop a project in a team, which requires a report. Offers students an opportunity to learn team/project management; work division; team communication; and the software development cycle of implementation, testing, critique, and further iteration. Requires knowledge of computer graphics, differential calculus, operating systems concepts, and algorithms."
    },
    {
        "course_tag": "CS",
        "course_number": "5933",
        "course_name": "Advanced Computer Science Topics for Teachers",
        "credit_hours": "4",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [],
        "description": "Offers learners intending to be certified as K–12 computer science educators an advanced programming course. Covers GUI development and event-driven programming, an introduction to modeling and simulation, basics of computer networking and security, as well as topics related to the state of the art in computer science."
    },
    {
        "course_tag": "CS",
        "course_number": "5934",
        "course_name": "Introduction to Inclusive Computer Science Teaching",
        "credit_hours": "4",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [],
        "description": "Introduces teaching computer science (CS) in grades K–12. Focuses on integrating CS concepts with other topic areas. Includes working with multilingual learners—examining student identities with respect to CS and exploring strategies for creating an inclusive CS classroom. Offers students an opportunity to design and practice implementing lesson plans for CS curricula at all grade levels, to explore current research in CS education, and to build a portfolio of teaching resources."
    },
    {
        "course_tag": "CS",
        "course_number": "5963",
        "course_name": "Topics",
        "credit_hours": "1,2",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [],
        "description": "Offers students an opportunity to learn about timely issues, develop new skills, or explore areas of broad interest in an immersive, short-course format.  Content and instructors vary by offering."
    },
    {
        "course_tag": "CS",
        "course_number": "5964",
        "course_name": "Projects for Professionals",
        "credit_hours": "0",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [],
        "description": "Offers students an applied project setting in which to apply their curricular learning. Working with a sponsor, students refine an applied research topic, perform research, develop recommendations that are shared with a partner sponsor, and create a plan for implementing their recommendations. Seeks to benefit students with a curriculum that supports the development of key business communication skills, project and client management skills, and frameworks for business analysis. Offers students an opportunity to learn from sponsor feedback, review 'lessons learned,' and incorporate suggestions from this review to improve and further develop their career development and professional plan. May be repeated twice."
    },
    {
        "course_tag": "CS",
        "course_number": "5965",
        "course_name": "Engaging with Industry Partners for Rising Professionals",
        "credit_hours": "0",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [],
        "description": "Offers students an enhanced applied project setting in which to apply their curricular learning. Working with a partner sponsor, students refine an applied research topic, perform research, develop recommendations that are shared with the partner sponsor, and create a plan for implementing their recommendations. Curriculum supports students as they develop key business communication skills, project and client management skills, and frameworks for business analysis. Offers students an opportunity to learn from sponsor feedback, review lessons learned, and incorporate suggestions to improve and further hone their career development and professional plan. Career development opportunities through skill-building workshops, panels, and interview preparation are available. Partner-student interactions, including a culminating project presentation, allow partners to assess student potential for co-op, internship, or other employment opportunities with the partner."
    },
    {
        "course_tag": "CS",
        "course_number": "5976",
        "course_name": "Directed Study",
        "credit_hours": "2-4",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [],
        "description": "Focuses on student examining standard computer science material in fresh ways or new computer science material that is not covered in formal courses. May be repeated up to three times."
    },
    {
        "course_tag": "IS",
        "course_number": "1300",
        "course_name": "Knowledge in a Digital World",
        "credit_hours": "4",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [
            "NUpath Ethical Reasoning",
            "NUpath Societies/Institutions"
        ],
        "description": "Examines the impact that information technologies (such as the internet, search engines, blogs, wikis, and smartphones); information processing techniques (such as big data analysis, machine learning, crowdsourcing, and cryptography); and information policies (such as privacy norms and speech restrictions) have on what we know and how much we know, as individuals and as a society. The digital world can enhance our ability to acquire knowledge by providing us with fast and cheap access to huge amounts of information. However, it can also undermine our cognitive abilities and provide us with inaccurate or misleading information. Studies normative frameworks from epistemology and ethics (such as epistemic value theory, the extended mind hypothesis, and moral rights) to evaluate these technologies and policies."
    },
    {
        "course_tag": "IS",
        "course_number": "1500",
        "course_name": "Introduction to Web Development",
        "credit_hours": "4",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [
            "NUpath Analyzing/Using Data"
        ],
        "description": "Introduces Web development and networks. Discusses HTML5, CSS, and client-side scripting with JavaScript and jQuery; embedding of media: images, video, and sound; the use of back-end data (either from databases or XML) to create dynamic Web sites; Web hosting, operating systems, and network infrastructure; and the automation of website construction using content management systems. Considers the construction of Web forms and the underlying protocols for information exchange: HTTP and HTTPS. Emphasizes the need for testing both correctness and usability. Offers a brief introduction to server-side scripting. Surveys the security problems faced by dynamic websites. Hands-on laboratory work is built into the course. May be taken as a general elective by CCIS students but does not count as a CS or IS elective."
    },
    {
        "course_tag": "IS",
        "course_number": "1990",
        "course_name": "Elective",
        "credit_hours": "1-4",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [],
        "description": "Offers elective credit for courses taken at other academic institutions. May be repeated without limit."
    },
    {
        "course_tag": "IS",
        "course_number": "2000",
        "course_name": "Principles of Information Science",
        "credit_hours": "4",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [
            "NUpath Analyzing/Using Data"
        ],
        "description": "Introduces information science. Examines how information is used to solve problems both for individuals and organizations and how information systems interface with their users. Considers the technical, economic, social, and ethical issues that arise when working with information. Discusses how to collect, manage, classify, store, encode, transmit, retrieve, and evaluate data and information with appropriate security and privacy. Storage models include lists, tables, and trees (hierarchies). Examines applications of information: visualization, presentation, categorization, decision making, and predictive modeling. Introduces key concepts in probability. Explains Bayesian analysis for information classification and modeling. Teaches intensive programming in Excel, including VBA macro development. Introduces programming in R."
    },
    {
        "course_tag": "IS",
        "course_number": "2050",
        "course_name": "Information and Uncertainty",
        "credit_hours": "4",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [
            "NUpath Analyzing/Using Data",
            "NUpath Formal/Quant Reasoning"
        ],
        "description": "Introduces the foundations of probabilistic inference, information theory, and their uses for drawing conclusions from noisy data. Applications include diagnosing diseases with inconclusive medical tests, locating autonomous vehicles when sensors are imperfect, and how best to make inferences with incomplete or partial information. Central topics include distinguishing deductive and probabilistic inference, philosophical interpretations of probability, fundamental justifications for the rules of probability, and key concepts of information theory. Introduces analytic and mathematical methods of analysis in these cases and contemporary computational (i.e., programming) techniques for implementing and applying theories of information and probabilistic inference."
    },
    {
        "course_tag": "IS",
        "course_number": "2990",
        "course_name": "Elective",
        "credit_hours": "1-4",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [],
        "description": "Offers elective credit for courses taken at other academic institutions. May be repeated without limit."
    },
    {
        "course_tag": "IS",
        "course_number": "2991",
        "course_name": "Research in Information Science",
        "credit_hours": "1-4",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [],
        "description": "Offers an opportunity to conduct introductory-level research or creative endeavors under faculty supervision."
    },
    {
        "course_tag": "IS",
        "course_number": "3050",
        "course_name": "Information and Uncertainty",
        "credit_hours": "4",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [
            "NUpath Analyzing/Using Data",
            "NUpath Formal/Quant Reasoning"
        ],
        "description": "Introduces the foundations of probabilistic inference, information theory, and their uses for drawing conclusions from noisy data. Applications include diagnosing diseases with inconclusive medical tests, locating autonomous vehicles when sensors are imperfect, and how best to make inferences with incomplete or partial information. Central topics include distinguishing deductive and probabilistic inference, philosophical interpretations of probability, fundamental justifications for the rules of probability, and key concepts of information theory. Introduces analytic and mathematical methods of analysis in these cases and contemporary computational (i.e., programming) techniques for implementing and applying theories of information and probabilistic inference."
    },
    {
        "course_tag": "IS",
        "course_number": "3500",
        "course_name": "Information System Design and Development",
        "credit_hours": "4",
        "prerequisites": "IS 2000 with a minimum grade of D- ;  CS 3500 with a minimum grade of D- ;  (ENGL 1111 with a minimum grade of C  or  ENGL 1102 with a minimum grade of C  or  ENGW 1111 with a minimum grade of C  or  ENGW 1102 with a minimum grade of C )",
        "corequisites": [],
        "attributes": [
            "NUpath Writing Intensive"
        ],
        "description": "Discusses the planning, analysis, design, and implementation of computer-based information systems, focusing on the methodologies and procedures used in organizational problem solving and systems development. Topics include the systems development life cycle; project management; requirements analysis and specification; feasibility and cost-benefit analysis; logical and physical design; prototyping; and system validation, deployment, and postimplementation review. Additional topics may include platform and database selection and integration issues; CASE tools; end-user training; maintenance; and object-oriented analysis and design."
    },
    {
        "course_tag": "IS",
        "course_number": "3990",
        "course_name": "Elective",
        "credit_hours": "1-4",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [],
        "description": "Offers elective credit for courses taken at other academic institutions. May be repeated without limit."
    },
    {
        "course_tag": "IS",
        "course_number": "4200",
        "course_name": "Information Retrieval",
        "credit_hours": "4",
        "prerequisites": "(CS 3500 with a minimum grade of D-  or  DS 3500 with a minimum grade of D- );  (CS 2810 with a minimum grade of D-  or  ECON 2350 with a minimum grade of D-  or  MATH 2280 with a minimum grade of D-  or  MATH 3081 with a minimum grade of D-  or  MGSC 2301 with a minimum grade of D-  or  PSYC 2320 with a minimum grade of D- )",
        "corequisites": [],
        "attributes": [],
        "description": "Introduces information retrieval (IR) systems and different approaches to IR. Topics covered include evaluation of IR systems; retrieval, language, and indexing models; file organization; compression; relevance feedback; clustering; distributed retrieval and metasearch; probabilistic approaches to IR; Web retrieval; filtering, collaborative filtering, and recommendation systems; cross-language IR; multimedia IR; and machine learning for IR."
    },
    {
        "course_tag": "IS",
        "course_number": "4300",
        "course_name": "Human Computer Interaction",
        "credit_hours": "4",
        "prerequisites": "CS 3500 with a minimum grade of D-  or  DS 3500 with a minimum grade of D-",
        "corequisites": [],
        "attributes": [],
        "description": "Studies the principles of human-computer interaction and the practice of user interface design. Discusses the major human information processing subsystems (perception, memory, attention, and problem solving), and how the properties of these systems influence the design of interactive systems. Reviews guidelines and specification languages for designing user interfaces, with an emphasis on tool kits of standard graphical user interface (GUI) objects. Introduces usability metrics and evaluation methods. Additional topics may include World Wide Web design principles and tools; wireless/mobile device interfaces; computer-supported cooperative work; information visualization; and virtual reality. Course work includes designing user interfaces, creating working prototypes using a GUI tool kit, and evaluating existing interfaces using the methods studied."
    },
    {
        "course_tag": "IS",
        "course_number": "4800",
        "course_name": "Empirical Research Methods",
        "credit_hours": "4",
        "prerequisites": "CS 2810 with a minimum grade of D-  or  ECON 2350 with a minimum grade of D-  or  ENVR 2500 with a minimum grade of D-  or  MATH 2280 with a minimum grade of D-  or  MATH 3081 with a minimum grade of D-  or  MGSC 2301 with a minimum grade of D-  or  PHTH 2210 with a minimum grade of D-  or  PSYC 2320 with a minimum grade of D-",
        "corequisites": [],
        "attributes": [],
        "description": "Evaluates and conducts empirical research, focusing on students’ use of empirical methods to study the effectiveness and organizational/social impact of information systems and technologies. Empirical research involves a number of broad steps including identifying problems; developing specific hypotheses; collecting data relevant to the hypotheses; analyzing the data; and considering alternative explanations for the empirical findings. Some of the most commonly used research techniques, such as surveys, experiments, and ethnographic methods, are discussed. Additional topics include the ethics of data collection and experimentation in behavioral science. Although the course focuses primarily on the relationship between formulating research questions and implementing the appropriate methods to answer them, students can expect to apply the statistical techniques learned in the course prerequisites."
    },
    {
        "course_tag": "IS",
        "course_number": "4990",
        "course_name": "Elective",
        "credit_hours": "1-4",
        "prerequisites": "",
        "corequisites": [],
        "attributes": [],
        "description": "Offers elective credit for courses taken at other academic institutions. May be repeated without limit."
    },
    {
        "course_tag": "IS",
        "course_number": "4991",
        "course_name": "Research",
        "credit_hours": "4,8",
        "prerequisites": "IS 4800 with a minimum grade of D-  or  (CS 5350 with a minimum grade of C-  or  CS 5350 with a minimum grade of D- )",
        "corequisites": [],
        "attributes": [
            "NUpath Capstone Experience",
            "NUpath Integration Experience",
            "NUpath Writing Intensive"
        ],
        "description": "Offers an opportunity to conduct research under faculty supervision. May be repeated up to three times."
    }
]